{"version":3,"sources":["Note.js","AddNote.js","TagFilter.js","NoteList.js","App.js","serviceWorker.js","index.js"],"names":["Note","removeNote","_this","props","text","date","Date","this","createdOn","react_default","a","createElement","className","tag","getMonth","getDate","onClick","Component","AddNote","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","updateNoteText","event","setState","noteText","target","value","updateNoteTag","noteTag","addNote","state","type","max","onChange","required","default","TagFilter","filterNotes","filterBy","NoteList","componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","response","data","wrap","_context","prev","next","isLoading","fetch","sent","ok","json","notes","Error","t0","console","log","message","stop","renderNotes","filteredNotes","length","map","note","Note_Note","key","todoDescription","created","filter","toConsumableArray","_ref2","_callee2","newNoteText","newNoteTag","newNote","_context2","method","headers","Content-Type","body","JSON","stringify","status","concat","error","_x","_x2","apply","arguments","removedNote","updatedNotes","AddNote_AddNote","TagFilter_TagFilter","App","NoteList_NoteList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7e593843.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Note.css';\n\nexport default class Note extends Component {\n  removeNote = () => {\n    this.props.removeNote(this.props.text);\n  }\n\n  render() {\n    const date = new Date(this.props.createdOn)\n\n    return (\n      <div className='note'>\n        <p className='text'>{this.props.text}</p>\n        <p className='tag'>{this.props.tag}</p>\n        <p className='created'>Created: {date.getMonth() + 1}/{date.getDate()}</p>\n        <button className='remove' onClick={this.removeNote}>X</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './AddNote.css';\n\nexport default class AddNote extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteText: '',\n      noteTag: '',\n    }\n  }\n\n  updateNoteText = (event) => {\n    this.setState({ noteText: event.target.value });\n  }\n\n  updateNoteTag = (event) => {\n    this.setState({ noteTag: event.target.value })\n  }\n\n  addNote = () => {\n    this.props.addNote(this.state.noteText, this.state.noteTag);\n    this.setState({ noteText: '' });\n    this.setState({ noteTag: '' });\n  }\n\n  render() {\n    return (\n      <div className=\"add-note\">\n        <h1>Add a Note</h1>\n        <div className='input-area'>\n          <textarea\n            type='text'\n            max='250'\n            onChange={this.updateNoteText}\n            value={this.state.noteText}\n          />\n        </div>\n        <div className='button-section'>\n          <select\n            className='tag-list'\n            onChange={this.updateNoteTag}\n            required\n          >\n            <option value='' default>Select Tag</option>\n            <option value='hobby'>Hobby</option>\n            <option value='work'>Work</option>\n            <option value='personal'>Personal</option>\n          </select>\n        </div>\n        <button className='add-button' onClick={this.addNote}>Add</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './TagFilter.css';\n\n\nexport default class TagFilter extends Component {\n  filterNotes = (event) => {\n    const filterBy = event.target.value;\n    this.props.filterNotes(filterBy);\n  }\n\n  render() {\n    return (\n      <div className=\"tag-filter\">\n        <button onClick={this.filterNotes} value=\"work\" className=\"work\">Work</button>\n        <button onClick={this.filterNotes} value=\"hobby\" className=\"hobby\">Hobby</button>\n        <button onClick={this.filterNotes} value=\"personal\" className=\"personal\">Personal</button>\n        <button onClick={this.filterNotes} value=\"all\" className=\"all\">All</button>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport './NoteList.css';\nimport Note from './Note'\nimport AddNote from './AddNote'\nimport TagFilter from './TagFilter'\n\nexport default class NoteList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: false,\n      notes: [],\n      filteredNotes: [],\n      error: false\n    };\n  }\n\n  componentDidMount = async () => {\n    this.setState({ isLoading: true })\n    try {\n      const response = await fetch(`https://cq31v4skne.execute-api.us-east-2.amazonaws.com/beta/todos?searchValue=all`)\n      if (response.ok) {\n        const data = await response.json()\n        this.setState({ notes: data, isLoading: false })\n      } else {\n        throw new Error('Something went wrong, please try again.')\n      }\n    } catch (error) {\n      console.log(error.message)\n    }\n  }\n\n  renderNotes = () => {\n    const notes = (this.state.filteredNotes.length ? this.state.filteredNotes : this.state.notes);\n    if (this.state.isLoading) {\n      return (<p>\"Loading...\"</p>)\n    }\n\n    return (\n      notes.map(note => (\n        <Note\n          key={note.todoDescription}\n          text={note.todoDescription}\n          tag={note.tag}\n          createdOn={note.created}\n          removeNote={this.removeNote}\n        />\n      ))\n    )\n  }\n\n  filterNotes = (filterBy) => {\n    const { notes } = this.state\n    if (filterBy === \"all\") {\n      this.setState({ filteredNotes: [] })\n    } else {\n      const filteredNotes = notes.filter(note => (\n        note.tag === filterBy\n      ));\n      this.setState({ filteredNotes: [...filteredNotes] })\n    }\n  }\n\n  addNote =  async (newNoteText, newNoteTag) => {\n    const newNote = { todoDescription: newNoteText, tag: newNoteTag, created: new Date() }\n\n    try {\n      const response = await fetch('https://cq31v4skne.execute-api.us-east-2.amazonaws.com/beta/todos', {\n        method: 'POST',\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify(newNote)\n      })\n      if( response.status === 200 ){\n        this.setState({\n          notes: [...this.state.notes, newNote],\n          error: false\n        })\n        console.log(this.state.notes)\n      } else {\n        throw Error\n      }\n\n    } catch (error) {\n      console.log(error.message)\n      this.setState({\n        error: true\n      })\n    }\n  }\n\n  removeNote = (removedNote) => {\n    const { notes } = this.state\n    const updatedNotes = notes.filter(note => (\n      note.text !== removedNote\n    ))\n    this.setState({ notes: updatedNotes })\n  }\n\n  render() {\n    return (\n      <div className='main-note-display'>\n\n        <AddNote addNote={this.addNote}/>\n\n\n        <div className='note-list'>\n          <h1>Notes</h1>\n          <TagFilter filterNotes={this.filterNotes}/>\n          {this.renderNotes()}\n        </div>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport NoteList from './NoteList'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <NoteList />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}